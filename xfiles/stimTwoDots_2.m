function SS = stimTwoDots(myScreenInfo, Pars)% Two dots or squares, stationary or looming%% SS = stimTwoDots(myScreenInfo,Pars) returns an object SS of type ScreenStim%% SS = stimTwoDots(myScreenInfo) uses the default parameters%% 2014-12-22 SS (based on stimTwoGratings)%% Basicsif nargin < 1    error('Must at least specify myScreenInfo');endif nargin < 2    Pars = [];end%% The parameters and their definitionpp = cell(1,1);pp{1}  = {'dur',      'Stimulus duration (s *10)',        20,1,600};pp{2}  = {'dA1',      'Starting diameter (deg*10)',       20,0,1200};pp{3}  = {'dB1',      'Final diameter (deg*10)',          200,0,1200};pp{4}  = {'xc1',      'Center, x (deg*10)',               -100,-1400,1400};pp{5}  = {'yc1',      'Center, y (deg*10)',               0,-450,450};pp{6}  = {'shape1',   'Square (1) or circle (0)',         0,0,1};pp{7}  = {'color1',   'Black (0) or white (1)',           0,0,1};pp{8}  = {'cr1',      'Contrast of red gun (%)',          100,0,100};pp{9}  = {'cg1',	  'Contrast of green gun (%)',        100,0,100};pp{10} = {'cb1',	  'Contrast of blue gun (%)',         100,0,100};pp{11} = {'dA2',      'Starting diameter (deg*10)',       20,0,1200};pp{12} = {'dB2',      'Final diameter (deg*10)',          200,0,1200};pp{13} = {'xc2',      'Center, x (deg*10)',               100,-1400,1400};pp{14} = {'yc2',      'Center, y (deg*10)',               0,-450,450};pp{15} = {'shape2',   'Square (1) or circle (0)',         0,0,1};pp{16} = {'color2',   'Black (0) or white (1)',           0,0,1};pp{17} = {'cr2',      'Contrast of red gun (%)',          100,0,100};pp{18} = {'cg2',	  'Contrast of green gun (%)',        100,0,100};pp{19} = {'cb2',	  'Contrast of blue gun (%)',         100,0,100};pp{20} = {'lr',	      'Mean luminance of red gun (%)',    50,0,100};pp{21} = {'lg',       'Mean luminance of green gun (%)',  50,0,100};pp{22} = {'lb',       'Mean luminance of blue gun (%)',   50,0,100};x = XFile('stimTwoDots', pp);% x.Write; % call this ONCE: it writes the .x file%% Parse the parametersif isempty(Pars)    Pars = x.ParDefaults;enddur         = Pars(1)/10;                       % sdiamStart   = myScreenInfo.Deg2Pix( [Pars(2), Pars(11)] /10 );       % degdiamFinal   = myScreenInfo.Deg2Pix( [Pars(3), Pars(12)] /10 );       % deg[xPos(1), yPos(1)] = myScreenInfo.Deg2PixCoord(Pars(4)/10, Pars(5)/10);  % deg[xPos(2), yPos(2)] = myScreenInfo.Deg2PixCoord(Pars(13)/10, Pars(14)/10); % degshape       = [Pars(6), Pars(15)];             % 0 or 1color       = [Pars(7), Pars(16)];             % 0 or 1cc 	= [Pars(8:10), Pars(17:19)] /100;          % between 0 and 1mm 	= Pars(20:22)/100;                        % between 0 and 1%% Make the stimulusSS = ScreenStim; % initializationSS.Type = x.Name;SS.Parameters = Pars;SS.nTextures = 2;SS.nFrames = ceil(myScreenInfo.FrameRate*dur );SS.Orientations = zeros(1,SS.nFrames);SS.Amplitudes = ones(2,SS.nFrames)/2; destRects = zeros(4, 2);sourceRects = zeros(4, 2);for idot = 1:2    npix = diamFinal(idot);    destRects(:,idot) = round([xPos(idot)-npix/2 yPos(idot)-npix/2 ...        xPos(idot)+npix/2 yPos(idot)+npix/2]');    sourceRects(:,idot) = [0 0 npix npix];endSS.DestRects = repmat(destRects, [1 1 SS.nFrames]);SS.SourceRects = repmat(sourceRects, [1 1 SS.nFrames]);SS.MinusOneToOne = false;%% Define Frames and FrameSequence for each component dotFrames          = cell(2,1);FrameSequence   = cell(2,1);for idot = 1:2        maxPix = diff(destRects([1 3], idot));    % Make a grid of x and y    [xx,yy] = meshgrid(1-maxPix/2:maxPix/2,1-maxPix/2:maxPix/2);            if diamStart(idot) ~= diamFinal(idot) % looming        % the diameter increases in each frame        diam = diamStart(idot) + ...            linspace(0, diamFinal(idot) - diamStart(idot), SS.nFrames);                % Make movies        fprintf(1,' Frames for dot %d...', idot);        for iframe = 1:SS.nFrames            if shape(idot) == 0 % dot                dd = sqrt(xx.^2+yy.^2);                WindowImage = double(dd <= diam(iframe)/2);            else % square                WindowImage = double(abs(xx) <= diam(iframe)/2 & ...                    abs(yy) <= diam(iframe)/2);            end            if color(idot) == 0                WindowImage = WindowImage .* (-1);            end            Frames{idot}{iframe} = zeros(maxPix, maxPix, 3);            for igun = 1:3                Frames{idot}{iframe}(:,:,igun) = uint8(255 * mm(igun) * ...                    (1 + cc(igun,idot) .* WindowImage));            end        end                % the frame sequence        FrameSequence{idot} = 1:SS.nFrames;            else % static size        % Make frame        fprintf(1,' Frames for dot %d...', idot);        if shape(idot) == 0 % dot            dd = sqrt(xx.^2+yy.^2);            WindowImage = double(dd <= maxPix/2);        else % square            WindowImage = double(abs(xx) <= maxPix/2 & ...                abs(yy) <= maxPix/2);        end        if color(idot) == 0            WindowImage = WindowImage .* (-1);        end        Frames{idot}{1} = zeros(maxPix, maxPix, 3);        for igun = 1:3            Frames{idot}{1}(:,:,igun) = uint8(255 * mm(igun) * ...                (1 + cc(igun,idot) .* WindowImage));        end                % the frame sequence        FrameSequence{idot} = ones(1,SS.nFrames);    endendSS.nImages = length(Frames{1}) + length(Frames{2});ImageTextures = [Frames{1}(:); Frames{2}(:)];SS.BackgroundColor = round(255 * mm);SS.BackgroundPersists = true;SS.ImageSequence = [FrameSequence{1}; FrameSequence{2} + length(Frames{1})];%% put the images in video RAMSS = SS.LoadImageTextures( myScreenInfo, ImageTextures );return%% to test the functionRigInfo = RigInfoGet; %#ok<UNRCH>myScreenInfo = ScreenInfo(RigInfo);myScreenInfo = myScreenInfo.CalibrationLoad;SS = stimTwoDots_2(myScreenInfo);show(SS, myScreenInfo);Screen('CloseAll');% Play(SS, myScreenInfo)