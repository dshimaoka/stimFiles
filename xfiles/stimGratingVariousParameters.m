function SS = stimGratingVariousParameters(myScreenInfo, Pars)% One grating, drifting or flickering, in disks or annuli or rectangles%% SS = stimStaticGratings(myScreenInfo, Pars)%% SS = stimStaticGratings(myScreenInfo) uses the default parameters%% 2015-04 SS (based on stimTwoGratings)%% Basicsif nargin < 1    error('Must at least specify myScreenInfo');endif nargin < 2    Pars = [];end%% The parameters and their definitionpp = cell(1,1);pp{1}  = {'dur',      'Stimulus duration (s *10)',        20,1,600};pp{2}  = {'tf',       'Temporal frequency (Hz *10)',      20,0,4000};pp{3}  = {'sf',       'Spatial frequency (cpd *100)',     8,1,1000};pp{4}  = {'tph',      'Temporal phase (deg)',             0,0,360};pp{5}  = {'sph',      'Spatial phase (deg)',              0,0,360};pp{6}  = {'ori',      'Orientation (deg)',                0,0,360};pp{7}  = {'dA',       'Inner diameter (deg*10)',          0,0,1200};pp{8}  = {'dB',       'Outer diameter (deg*10)',          200,0,1200};pp{9}  = {'xc',       'Center, x (deg*10)',               -100,-1400,1400};pp{10} = {'yc',       'Center, y (deg*10)',               0,-450,450};pp{11} = {'flck',     'Flickering (1) or drifting (0)',   0,0,1};pp{12} = {'sqwv',     'Square wave (1) or sinusoid (0)',  0,0,1};pp{13} = {'duty',     'Duty cycle (*100)',                100,0,100};pp{14} = {'shape',    'Rectangle (1) or circle (0)',      0,0,1};pp{15} = {'cr',       'Contrast of red gun (%)',          100,0,100};pp{16} = {'cg',	      'Contrast of green gun (%)',        100,0,100};pp{17} = {'cb',	      'Contrast of blue gun (%)',         100,0,100};pp{18} = {'lr',	      'Mean luminance of red gun (%)',    50,0,100};pp{19} = {'lg',       'Mean luminance of green gun (%)',  50,0,100};pp{20} = {'lb',       'Mean luminance of blue gun (%)',   50,0,100};x = XFile('stimGratingVariousParameters', pp);% x.Write; % call this ONCE: it writes the .x file%% Parse the parametersif isempty(Pars)    Pars = x.ParDefaults;enddur         = Pars(1)/10;           % stfreq	 	= Pars(2) /10;          % Hzsfreq  		= Pars(3) /100;         % cpdtempphase  	= Pars(4) * (pi/180);   % radiansspatphase  	= Pars(5) * (pi/180);   % radiansorientation = Pars(6);              % degdiamIn      = myScreenInfo.Deg2Pix( Pars(7) /10 );       % degdiamOut     = myScreenInfo.Deg2Pix( Pars(8) /10 );       % deg[CtrCol(1), CtrRow(1)] = myScreenInfo.Deg2PixCoord(Pars(9)/10, Pars(10)/10);  % degflck        = Pars(11);             % 0 or 1sqwv        = Pars(12);             % 0 or 1duty        = Pars(13);             % between 0 and 1shape       = Pars(14);             % 0 or 1cc 	= Pars(15:17) /100;          % between 0 and 1mm 	= Pars(18:20)/100;           % between 0 and 1%% Make the stimulusSS = ScreenStim; % initializationSS.Type = x.Name;SS.Parameters = Pars;SS.nTextures = 1;SS.nFrames = ceil( myScreenInfo.FrameRate*dur );SS.Orientations = repmat(orientation, [1,SS.nFrames]);SS.Amplitudes = ones(1,SS.nFrames)/2; destRects = zeros(4, 1);sourceRects = zeros(4, 1);% if shape == 1 % rectangle%     shrinkBy = 5;% else          % annulus%     shrinkBy = 1;% endswitch shape    case 0        % it is an annulus        nx = diamOut;        ny = diamOut;    case 1        % it is a rectangle        nx = diamIn;        ny = diamOut;end%% Define Frames and FrameSequence for each component grating    t = 0.001; % thresholdif duty<1    beta = log(t)/log(cos( duty*pi/2 ));else    beta = 1;end% Spatial frequency in cycles/pixelPixPerCycle = myScreenInfo.Deg2Pix(1/sfreq);frequency = 1/PixPerCycle; % sf in cycles/pix%     nx = diff(destRects([1 3], igrat));%     ny = diff(destRects([2 4], igrat));% Make a grid of x and y[xx,yy] = meshgrid(1-nx/2:nx/2,1-ny/2:ny/2);% Image of the spatial phase of the stimulus (in radians)AngFreqs = -2*pi* frequency * xx + spatphase;switch shape    case 0        % an annulus        dd = sqrt(xx.^2+yy.^2);        WindowImage = double(dd >= diamIn/2 & dd <= ny/2);    case 1        % a rectangle        WindowImage = double(ones(size(xx)));end% The temporal phase of the responseif tfreq == 0    nFramesInPeriod = 1;else    nFramesInPeriod = round(myScreenInfo.FrameRate / tfreq);endTemporalPhase = 2*pi*(0:(nFramesInPeriod-1))/nFramesInPeriod + tempphase;ActualFrequency = myScreenInfo.FrameRate/nFramesInPeriod;if tfreq > 0 && abs(ActualFrequency/tfreq-1)>0.1    fprintf(1,'Frequency %d is %2.2f rather than %2.0f Hz\n', ...        igrat, ActualFrequency, tfreq);end% Make moviesif shape == 1 % rectangle    shrinkBy = 5;else          % annulus    shrinkBy = 1;endWindowImage = WindowImage(1:shrinkBy:end, 1:shrinkBy:end);if flck    % flickering    ContrastImage = sin(AngFreqs);    ContrastImage = sign(ContrastImage).*abs(ContrastImage).^beta;    if sqwv        ContrastImage = (ContrastImage>0.01)-(ContrastImage<-0.01);    end    ContrastImage = ContrastImage(1:shrinkBy:end,1:shrinkBy:end);    Frames = cell(nFramesInPeriod,1);    for iframe = 1:nFramesInPeriod        Frames{iframe} = zeros(size(ContrastImage,1), ...            size(ContrastImage,2), 3);        for igun = 1:3            Frames{iframe}(:,:,igun) = uint8(255 * mm(igun) * ...                (1 + cc(igrat,igun)*ContrastImage  .* WindowImage));        end    endelse    % drifting    Frames = cell(nFramesInPeriod,1);    for iframe = 1:nFramesInPeriod        ContrastImage = sin( AngFreqs + TemporalPhase(iframe));        ContrastImage = sign(ContrastImage).*abs(ContrastImage).^beta;        if sqwv            ContrastImage = (ContrastImage>=0)-(ContrastImage<0);        end        ContrastImage = ContrastImage(1:shrinkBy:end,1:shrinkBy:end);        Frames{iframe} = zeros(size(ContrastImage,1), ...            size(ContrastImage,2), 3);        for igun = 1:3            Frames{iframe}(:,:,igun) = uint8(255 * mm(igun) * ...                (1 + cc(igun)*ContrastImage  .* WindowImage));        end    endenddestRects(:) = round([CtrCol-nx/2 CtrRow-ny/2 ...    CtrCol+nx/2 CtrRow+ny/2]');% sourceRects(:) = [0 0 nx ny];sourceRects(:) = [0 0 size(ContrastImage,2) size(ContrastImage,1)];SS.DestRects = repmat(destRects, [1 1 SS.nFrames]);SS.SourceRects = repmat(sourceRects, [1 1 SS.nFrames]);SS.MinusOneToOne = false;% the frame sequenceFrameSequence = mod(1:SS.nFrames,nFramesInPeriod);FrameSequence(FrameSequence == 0) = nFramesInPeriod;SS.nImages = nFramesInPeriod;ImageTextures = Frames;SS.BackgroundColor = round(255 * mm);SS.BackgroundPersists = true;SS.ImageSequence = FrameSequence;% SS.BilinearFiltering = 0; % do not interpolate! %% put the images in video RAMSS = SS.LoadImageTextures( myScreenInfo, ImageTextures );return%% to test the functionRigInfo = RigInfoGet; %#ok<UNRCH>myScreenInfo = ScreenInfo(RigInfo);myScreenInfo = myScreenInfo.CalibrationLoad;SS = stimGratingVariousParameters(myScreenInfo);show(SS, myScreenInfo);Screen('CloseAll');% Play(SS, myScreenInfo)