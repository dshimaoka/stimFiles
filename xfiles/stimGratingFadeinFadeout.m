function SS = stimGratingFadeinFadeout(myScreenInfo, Pars)% One grating, drifting or flickering, in disks or annuli or rectangles%% SS = stimGratingWithMask(myScreenInfo, Pars)%% SS = stimGratingWithMask(myScreenInfo) uses the default parameters%% 2015-09 MP based on stimGratingWithMask.m. Added onset and offset times.%% Basicsif nargin < 1    error('Must at least specify myScreenInfo');endif nargin < 2    Pars = [];end%% The parameters and their definitionpp = cell(1,1);pp{1}  = {'dur',      'Stimulus duration (s *10)',        90,1,600};pp{2}  = {'tf',       'Temporal frequency (Hz *10)',      20,0,4000};pp{3}  = {'sf',       'Spatial frequency (cpd *1000)',    80,0,1000};pp{4}  = {'tph',      'Temporal phase (deg)',             0,0,360};pp{5}  = {'sph',      'Spatial phase (deg)',              0,0,360};pp{6}  = {'ori',      'Orientation (deg)',                0,0,360};pp{7}  = {'diam',     'Diameter (deg*10)',                200,0,2700};pp{8}  = {'xc',       'Center, x (deg*10)',               -100,-1400,1400};pp{9}  = {'yc',       'Center, y (deg*10)',               0,-450,450};pp{10} = {'tstart',   'Drifting start (s*10)',            30,1,600};pp{11} = {'tstop',    'Drifting stop (s*10)',             60,1,600};pp{12} = {'cr',       'Contrast of red gun (%)',          100,0,100};pp{13} = {'cg',	      'Contrast of green gun (%)',        100,0,100};pp{14} = {'cb',	      'Contrast of blue gun (%)',         100,0,100};pp{15} = {'lr',	      'Mean luminance of red gun (%)',    50,0,100};pp{16} = {'lg',       'Mean luminance of green gun (%)',  50,0,100};pp{17} = {'lb',       'Mean luminance of blue gun (%)',   50,0,100};x = XFile('stimGratingFadeinFadeout', pp);% x.Write; % call this ONCE: it writes the .x file%% Parse the parametersif isempty(Pars)    Pars = x.ParDefaults;enddur         = Pars(1)/10;           % stfreq	 	= Pars(2) /10;          % Hzsfreq  		= Pars(3) /1000;         % cpdtempphase  	= Pars(4) * (pi/180);   % radiansspatphase  	= Pars(5) * (pi/180);   % radiansorientation = Pars(6);              % deg% diamIn      = myScreenInfo.Deg2Pix( Pars(7) /10 );       % degdiamOut     = myScreenInfo.Deg2Pix( Pars(7) /10 );       % deg[CtrCol(1), CtrRow(1)] = myScreenInfo.Deg2PixCoord(Pars(8)/10, Pars(9)/10);  % degtonset        = Pars(10)/10;             % in secondstoffset       = Pars(11)/10;             % in secondscc 	= Pars(12:14)/100;          % between 0 and 1mm 	= Pars(15:17)/100;           % between 0 and 1%% Make the stimulusSS = ScreenStim; % initializationSS.Type = x.Name;SS.Parameters = Pars;SS.nTextures = 1;SS.nFrames = round( myScreenInfo.FrameRate*dur );nFrames1 = round( myScreenInfo.FrameRate*tonset );nFrames2 = round( myScreenInfo.FrameRate*toffset );SS.Orientations = repmat(orientation, [1,SS.nFrames]);SS.Amplitudes = ones(1,SS.nFrames); % global alpha value% set frames before nFrames1 to have increasing contrast from 0SS.Amplitudes(1:min(nFrames1, SS.nFrames)) = ...    linspace(0, 1, min(nFrames1, SS.nFrames)); % global alpha valueinds = (1+nFrames2):SS.nFrames;if numel(inds)>0    SS.Amplitudes(inds) = linspace(1, 0, numel(inds)); % global alpha valueend% FrameSequence((1+nFrames2):SS.nFrames) = FrameSequence(min(SS.nFrames, nFrames2));% determine size of grating and mask (not size of presented part of% gratings through mask)nxGrating = diamOut;%% Define Frames and FrameSequence for each component grating    % Spatial frequency in cycles/pixelif sfreq == 0    frequency = 0;else    PixPerCycle = myScreenInfo.Deg2Pix(1/sfreq);    frequency = 1/PixPerCycle; % sf in cycles/pixend% Make a row of xxx = 1-round(nxGrating/2):round(nxGrating/2);% Image of the spatial phase of the stimulus (in radians)AngFreqs = -2*pi* frequency * xx + spatphase;% The temporal phase of the responseif tfreq == 0    nFramesInPeriod = 1;else    nFramesInPeriod = round(myScreenInfo.FrameRate / tfreq);endTemporalPhase = 2*pi*(0:(nFramesInPeriod-1))/nFramesInPeriod + tempphase;ActualFrequency = myScreenInfo.FrameRate/nFramesInPeriod;if tfreq > 0 && abs(ActualFrequency/tfreq-1)>0.1    fprintf(1,'Frequency %d is %2.2f rather than %2.0f Hz\n', ...        igrat, ActualFrequency, tfreq);end% Make movies    % drifting    Frames = cell(nFramesInPeriod,1);    for iframe = 1:nFramesInPeriod        ContrastImage = sin( AngFreqs + TemporalPhase(iframe));        Frames{iframe} = zeros([size(ContrastImage), 3]);        for igun = 1:3            Frames{iframe}(:,:,igun) = uint8(255 * mm(igun) * ...                (1 + cc(igun)*ContrastImage));        end    enddestRects = zeros(4, 1);sourceRects = zeros(4, 1);destRects(:,1) = round([CtrCol-nxGrating/2 CtrRow-nxGrating/2 ...    CtrCol+nxGrating/2 CtrRow+nxGrating/2]');% destRects(:,2) = round([CtrCol-nxMask/2 CtrRow-nxMask/2 ...%     CtrCol+nxMask/2 CtrRow+nxMask/2]');sourceRects(:,1) = [0 0 length(ContrastImage) 1];% sourceRects(:,2) = [0 0 size(MaskImage,2) size(MaskImage,1)];SS.DestRects = repmat(destRects, [1 1 SS.nFrames]);SS.SourceRects = repmat(sourceRects, [1 1 SS.nFrames]);SS.MinusOneToOne = false;SS.UseAlpha = true;% the frame sequenceFrameSequence = mod(1:SS.nFrames,nFramesInPeriod);FrameSequence(FrameSequence == 0) = nFramesInPeriod;SS.nImages = length(Frames); % +1 for masktf1                                 = ceil(myScreenInfo.FrameRate*tonset);tf2                                 = ceil(myScreenInfo.FrameRate*toffset);% FrameSequence                       = cat(2, ones(1,tf1-1) * SS.nImages, FrameSequence);% FrameSequence                       = FrameSequence(1:SS.nFrames);% FrameSequence((tf2+1):SS.nFrames)   = SS.nImages;ImageTextures           = [Frames];SS.BackgroundColor      = round(255 * mm);SS.BackgroundPersists   = true;% SS.BackgroundColor      = mm;% SS.BackgroundPersists   = true;% set all frames before nFrames1 to be the same% FrameSequence(1:min(nFrames1, SS.nFrames))           = FrameSequence(min(SS.nFrames, max(1,nFrames1)));% set all frames after nFrames2 to be the same% FrameSequence((1+nFrames2):SS.nFrames) = FrameSequence(min(SS.nFrames, nFrames2));% SS.ImageSequence = [FrameSequence; ones(1,SS.nFrames) * SS.nImages];SS.ImageSequence        = FrameSequence; %% put the images in video RAMSS = SS.LoadImageTextures( myScreenInfo, ImageTextures );return%% to test the functionRigInfo = RigInfoGet; %#ok<UNRCH>myScreenInfo = ScreenInfo(RigInfo);myScreenInfo = myScreenInfo.CalibrationLoad;SS = stimGratingWithMask(myScreenInfo);show(SS, myScreenInfo);Screen('CloseAll');% Play(SS, myScreenInfo)