function Stim =  vislumcongauss(pars,myscreen);% Stim =  vislumcongauss(pars,myscreen);%% YOU MUST HAVE Gauss.Contrast > (1-Grat.Contrast)/(1+Grat.Contrast)% %2002-05 MC (code from visgratgrat)%2002-05 VM g_sigma can be zero, introduced t1 and t2%% parameters are : [ dur x y diam tf c sf100 ph ori g_sigma g_c ]%% SEE THE END OF THE FILE FOR CODE USED TO TEST THE FUNCTION%-------------- parse the parameters -------------duration 	= pars(1)/10; % duration.xcenter		= ceil(ltdeg2pix(pars(2)/10,myscreen)); % Centre x (deg*10).ycenter		= ceil(ltdeg2pix(pars(3)/10,myscreen)); % Centre y (deg*10).npix = ceil(ltdeg2pix(pars(4)/10,myscreen)); % deg*10npix = max(npix,1); % safety measure to ensure there is at least 1 pixellsigma = ltdeg2pix(pars(5)/10,myscreen); % sigma in pixlbase = pars(6)/100; % base luminancelinstep = pars(7)/100; % luminance increment at stimulus centerloutstep = pars(8)/100; % luminance increment at stimulus peripherycdiam = ceil(ltdeg2pix(pars(9)/10,myscreen)); % deg*10csigma = ltdeg2pix(pars(10)/10,myscreen); % sigma in pixcinbase = pars(11)/100; % base contrast at stimulus centercinstep = pars(12)/100; % contrast increment at stimulus centercoutstep = pars(13)/100; % contrast increment at stimulus peripherytf 		= pars(14)/10; %  Temporal frequency.sf 		= 1./ltdeg2pix(100/pars(15),myscreen); % sf in cycles/pixph		= pars(16)/180*pi;ori 	= pars(17) * (pi/180); % orientation %--------------------------------------------------boundaries = [lbase*(1+cinbase) lbase*(1-cinbase);...              (lbase+linstep)*(1+cinbase+cinstep) (lbase+linstep)*(1-cinbase-cinstep);...			  (lbase+loutstep)*(1+coutstep) (lbase+loutstep)*(1-coutstep)];			  if any(boundaries(:)<0) | any(boundaries(:)>1)	disp('WARNING'); disp('WARNING');	warning('Parameter values out of bound');	duration = 0.5; % make it short, so user realizes there is something wrongend% ------ period = round(myscreen.FrameRate / tf); % frames/sec * sec/cycle = frames/cyclenperiods = ceil(duration*myscreen.FrameRate / (3*period)) * 3;nframes = nperiods*period;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%Stim = [];% ---- make a grid of x and y[xx,yy]=meshgrid(1-npix/2:npix/2,1-npix/2:npix/2);rr2=xx.^2+yy.^2;lwindow = ( rr2<(npix/2)^2 );if lsigma > 0	lumstep = lwindow.*(loutstep+(linstep-loutstep).*exp(-rr2/(2*lsigma^2))); % bet 0 (black) and 1 (white)else	lumstep = lwindow.*linstep; % a uniform increase in mean luminanceendcwindow = ( rr2<(cdiam/2)^2 );if csigma > 0	conbase = cwindow.*cinbase.*exp(-rr2/(2*csigma^2));	constep = cwindow.*(coutstep+(cinstep-coutstep).*exp(-rr2/(2*csigma^2))); % bet 0 (black) and 1 (white)else	conbase = cwindow.*cinbase;	constep = cwindow.*cinstep;end% figure; imagesc(meanlight(1)); colormap gray; colorbarangfreq = 2*pi* sf*(-cos( ori).*xx-sin( ori).*yy );% make the movie movie = cell(period*2,1);% The frames without the gaussian intenstity profilefor iframe = 1:period	movieimage = lbase.*(1+conbase.*sin( 2*pi*iframe/period + ph + angfreq ));	% figure; imagesc(movieimage); colormap gray; colorbar	% at this point movieimage goes bet 0 and 1	movie{iframe} = uint8(round(movieimage*252 + 3)); 	% and at this point movieimage goes bet 3 and 255end% The frames with gaussianfor iframe = period+1:period*2	movieimage = (lbase+lumstep).*(1+(conbase+constep).*cwindow.*sin( 2*pi*iframe/period + ph + angfreq ));	% figure; imagesc(movieimage); colormap gray; colorbar	% at this point movieimage goes bet 0 and 1	movie{iframe} = uint8(round(movieimage*252 + 3)); 	% and at this point movieimage goes bet 3 and 255endStim.frames{1} = movie;Stim = ltMakeOffScreenWindows(myscreen,Stim,1);% define the look-up tables linClut = [ [128 128 128]; [255 255 255]; [  1   1   1]; round(linspace(1,255,253))'*[1 1 1] ];Stim.luts{1} = linClut;% coordinates of center of stimulus with respect to the top left of the screenx = xcenter + myscreen.Xmax/2;y = ycenter + myscreen.Ymax/2;% coordinates of top left of stimulus with respect to the top left of the screenx = x - round(npix/2);y = y - round(npix/2);Stim.position(1,:) = [x,y,x+npix,y+npix];% define the sequences for the frames and the lutsStim.sequence.frames = zeros(1,nframes);Stim.sequence.frames(1:nframes/3) = mod((1:nframes/3)-1,period)+1;Stim.sequence.frames(nframes*1/3+1:nframes*2/3) = mod((1:nframes/3)-1,period)+1+period;Stim.sequence.frames(nframes*2/3+1:nframes) = mod((1:nframes/3)-1,period)+1;Stim.sequence.luts = ones(1,nframes);% define the number of times you want to see the movie		Stim.nperiods = 1;return%----------------------------------------------------------------------------% TO TEST IT:myscreen = ltScreenInitialize(1);		myscreen.Dist = 65;ltLoadCalibration(myscreen,3);dur=100; x=0; y=0; ldiam=200; lsigma = 0; lbase = 50; linstep = 0; loutstep = 0;cdiam=200; csigma = 20; cinbase =50; cinstep = 0;coutstep= 50;tf=60; sf100=80; ph=45; ori=90;pars = [dur;x;y;ldiam;lsigma;lbase;linstep;loutstep;cdiam;csigma;cinbase;cinstep;coutstep;tf;sf100;ph;ori];ltClearStimulus(Stim,'nowarnings'); Stim = vislumcongauss(pars,myscreen);vsPlayStimulus(myscreen,Stim,'norush');	SCREEN('CloseAll');