function Stim =  vbarstatgrat(pars,myscreen)% Stim =  vbarstatgrat(pars,myscreen)%% code for vbarstatgrat.x%% MC 2004%% SEE CODE AT THE END OF THE FUNCTION TO TEST % % ------------- read the parameters of counterphase gratingdur 	= pars( 1)/10;       % s, total durationori		= pars( 2)*(pi/180);	% carrier orientation (fixed)sf      = pars( 3)/100;      % cpd, spat freq of gratingphase   = pars( 4)*(pi/180); % radians, phase of grating c       = pars( 5)/100;      % percent contrast sqwv	= pars( 6);			% 0=sine, 1=squareEtf 	= pars( 7)/10;  	% Hz, temporal frequency of envelopeEwidth  = pars( 8)/10; 		% deg, width of envelopeEori	= pars( 9); 		% deg, must be 0 or 90Enbars  = pars(10);			% number of barsctrX	= pars(11)/10; 		% deg, position x of center of windowctrY	= pars(12)/10; 		% deg, position y of center of windowsz		= pars(13)/10;		% deg, size of the overall squarereverseflag = 0;if Eori>=180	reverseflag = 1;	Eori = Eori-180;endSinPars = [];SinPars.tFreq	 			= 1; % this should not be used	SinPars.SpatialFrequency  	= sf; 		SinPars.phase  				= phase; 		SinPars.Contrast 	 		= c; SinPars.sqwv	            = sqwv;	% 0=sine, 1=squareSinPars.Orientation 		= ori;sizepix = ceil(ltdeg2pix(sz,myscreen));ctrXpix = round(ltdeg2pix(ctrX,myscreen)+myscreen.Xmax/2);ctrYpix = round(ltdeg2pix(ctrY,myscreen)+myscreen.Ymax/2);if  ctrXpix + sizepix/2 > myscreen.Xmax | ctrXpix - sizepix/2 < 0 | ...	ctrYpix + sizepix/2 > myscreen.Ymax | ctrYpix - sizepix/2 < 0 	fprintf(1,'\n\n Warning!!! size too big. Rescaling.\n\n');	ctrXpix = round(myscreen.Xmax/2);	ctrYpix = round(myscreen.Ymax/2);	sizepix = 2;endif Eori==0	SinPars.sizeX = round(ltdeg2pix(Ewidth, myscreen));	SinPars.sizeY = round(sizepix);else	SinPars.sizeX = round(sizepix);		SinPars.sizeY = round(ltdeg2pix(Ewidth, myscreen));endnpos			= round(myscreen.FrameRate / Etf );nperiods		= ceil(dur*Etf);% vector of positions within the squarepos = round( (sizepix/npos)/2 + linspace(0,sizepix,npos+1) );pos = pos(1:npos);if reverseflag		pos = pos(end:-1:1);end%-------------- create the stim structure --------------Stim = [];[Cluts, nCluts] = ltMakeGratingCluts(SinPars,myscreen,'reserve3');% turn the 3-D array into a cell array:luts = cell(nCluts,1);for iClut = 1:nCluts	luts{iClut} = squeeze(Cluts(iClut,:,:)); end% old: Stim.luts = luts;Stim.luts = {luts{1}};patch = ltMakeGratingFrame(SinPars,myscreen,'reserve3');fprintf(1,'Making frames...')for ipos = 1:npos	tempFrame = zeros(sizepix,sizepix);	for ibar = 1:Enbars		a =  pos(ipos) - round(SinPars.sizeX/2 + (ibar-1)*sizepix/Enbars);			if Eori==0			b =  a + SinPars.sizeX-1;			tempFrame(:, mod([a:b]-1,sizepix)+1 ) = patch;		else			b =  a + SinPars.sizeY -1;					tempFrame(mod([a:b]-1,sizepix)+1, : ) = patch;		end		Stim.frames{1}{ipos} = tempFrame; 	endend	fprintf(1,'done. ');fprintf(1,'Making off screen windows...')Stim = ltMakeOffScreenWindows(myscreen,Stim,0); % put the flag to 1 if you are debuggingfprintf(1,'done\n');% old: Stim.sequence.luts = mod([1:npos]-1,nCluts) + 1;Stim.sequence.luts = ones(1,npos);Stim.sequence.frames 	= [1:npos]; %------- define position vector	startX = round(ctrXpix - sizepix/2);startY = round(ctrYpix - sizepix/2);Stim.position(1,:) = [startX startY startX+sizepix startY+sizepix]; % this is wrong, should be centeredStim.nperiods = nperiods;return%--------------------------------------------------------------------------------------------% TO TEST IT:myscreen = ltScreenInitialize(1);		myscreen.Dist = 65;ltLoadCalibration(myscreen,3);dur 	= 40;       % s*10, total duration%---- carrier parametersori		= 90;		% degsf100   = 10;       % cpd*100phase   = 0; 		% deg c       = 50;       % percent sqwv	= 1;		% 0=sine, 1=square%---- envelope parametersEtf 	= 10;  		% Hz*10Ewidth  = 30; 		% deg*10Eori	= 270; 		% deg, must be 0 or 90Enbars  = 3;	% number of barsctrX	= 0; 		% deg*10ctrY	= 0; 		% deg*10sz		= 250;		% deg*10pars = [ dur ori sf100 phase c sqwv Etf Ewidth Eori Enbars ctrX ctrY sz];Stim = vbarstatgrat(pars,myscreen);vsPlayStimulus(myscreen,Stim,'norush');	ltClearStimulus(Stim,'nowarnings'); SCREEN('CloseAll');