function Stim =  test(pars,myscreen)% Stim =  vcarrierori(pars,myscreen)%% code for vcarrierpos.x%% derived from vis2luts2grats100%% AB and MC 2004%% SEE CODE AT THE END OF THE FUNCTION TO TEST % pars = [ 100 0 4 20 50 0 50 3 60 0]% ------------- read the parameters of counterphase gratingdur 	= pars(1)/10;       % s, total durationori		= pars(2)*(pi/180);	% orientation (fixed)nperiods = pars(3);      	% s, period of change in positiontf      = pars(4)/10;       % Hz, temp freq of grating sf      = pars(5)/100;      % cpd, spat freq of gratingphase   = pars(6)*(pi/180); % radians, phase of grating c       = pars(7)/100;      % percent contrast npos   	= pars(8);          % number of positionssizeX	= pars(9);			% size of the rectangle (pixels)sizeY	= pars(10);			% either SizeX or sizeY must be zero							if nperiods<0	reverseflag = 1;	nperiods = -nperiods;else	reverseflag = 0;endSinPars = [];SinPars.tFreq	 			= tf; 	SinPars.SpatialFrequency  	= sf; 		SinPars.phase  				= phase; 		SinPars.Contrast 	 		= c; SinPars.sqwv	            = 0;	% 0=sine, 1=squareSinPars.Orientation 		= ori;if sizeX	SinPars.sizeX			= sizeX;	SinPars.sizeY			= myscreen.Ymax;else	SinPars.sizeX			= myscreen.Xmax;	SinPars.sizeY			= sizeY;end	ctr.x	 			        = 0; ctr.y				        = 0; % total number of framesnframestotal    = round(myscreen.FrameRate * dur);nframesperiod	= round(nframestotal/ nperiods);% vector of number of frames for each positionnframesperpos = linspace(0,nframesperiod,npos+1);nframesperpos = diff(round(nframesperpos));% vector of positionsif sizeX	pos = round(linspace(1+sizeX/2,myscreen.Xmax-sizeX/2,npos));else	pos = round(linspace(1+sizeY/2,myscreen.Ymax-sizeY/2,npos));end	pos = pos(1:npos);if reverseflag	pos = pos(end:-1:1);end%-------------- create the stim structure --------------Stim = [];[Cluts, nCluts] = ltMakeGratingCluts(SinPars,myscreen,'reserve3');% turn the 3-D array into a cell array:luts = cell(nCluts,1);for iClut = 1:nCluts	luts{iClut} = squeeze(Cluts(iClut,:,:)); endStim.luts = luts;patch = ltMakeGratingFrame(SinPars,myscreen,'reserve3');if sizeX	for ipos = 1:npos		tempFrame = zeros(myscreen.Ymax,myscreen.Xmax);		fprintf(1,'.')		centerX = pos(ipos);		a = centerX - sizeX/2;		b = centerX + sizeX/2 -1;		tempFrame(1:end,a:b) = patch;		Stim.frames{1}{ipos} = tempFrame; 	endelse	for ipos = 1:npos		tempFrame = zeros(myscreen.Ymax,myscreen.Xmax);		fprintf(1,'.')		centerY = pos(ipos);		a = centerY - sizeY/2;		b = centerY + sizeY/2 -1;		tempFrame(a:b,1:end) = patch;		Stim.frames{1}{ipos} = tempFrame; 	endend	Stim = ltMakeOffScreenWindows(myscreen,Stim,0); % put the flag to 1 if you are debuggingStim.sequence.luts = mod([1:nframesperiod]-1,nCluts) + 1;Stim.sequence.frames 	= ones(1,nframesperiod); % for allocation and initializationiframe = 0;for ipos = 1:npos	Stim.sequence.frames(iframe+[1:nframesperpos(ipos)]) = ipos;	iframe = iframe+nframesperpos(ipos);end%------- define position vector	Stim.position(1,:) = [1 1 1+myscreen.Xmax 1+myscreen.Ymax];Stim.nperiods = nperiods;return%--------------------------------------------------------------------------------------------% TO TEST IT:myscreen = ltScreenInitialize(1);		myscreen.Dist = 65;ltLoadCalibration(myscreen,3);Stim = test([ 100 0 4 20 50 0 50 10 60 0],myscreen);vsPlayStimulus(myscreen,Stim,'norush');	ltClearStimulus(Stim,'nowarnings'); SCREEN('CloseAll');